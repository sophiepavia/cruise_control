import numpy as np
import matplotlib.pyplot as plt
from math import pi, sin
import control as ct

def vehicle_update(t, x, u, params={}):
    """"
    Vehicle Dynamics

    Parameters:
    x (array) : System state, car velocity in m/s
    u (array) : System input, [throttle, gear, road_slope], 
            where throttle is a float between 0 and 1, gear is an 
            integer between 1 and 5, and road_slope is in rad.
    Returns:
    dv (float) : Vehicle acceleration

    """
    # Get system parameters
    m = params.get('m', 1000.)              # vehicle mass, kg
    g = params.get('g', 9.8)                # gravitational constant, m/s^2
    alpha = params.get(
        'alpha', [40, 25, 16, 12, 10])      # gear ratio / wheel radius

    # Define variables for vehicle state and inputs
    v = x[0]                           # vehicle velocity
    throttle = np.clip(u[0], 0, 1)     # vehicle throttle
    gear = u[1]                        # vehicle gear
    theta = u[2]                       # road slope

    # Force generated by the engine
    omega = alpha[int(gear)-1] * v      # engine angular speed
    F = alpha[int(gear)-1] * motor_torque(omega, params) * throttle

    # Disturbance force 
    # Letting the grade of the road be theta, gravity gives the
    # force Fg = m*g*sin(theta)
    Fg = m * g * sin(theta)

    # Final acceleration on the car
    Fd = Fg
    dv = (F - Fd) / m

    return dv

def motor_torque(omega, params={}):
    # Set up the system parameters
    Tm = params.get('Tm', 190.)             # engine torque constant
    omega_m = params.get('omega_m', 420.)   # peak engine angular speed
    beta = params.get('beta', 0.4)          # peak engine rolloff

    return np.clip(Tm * (1 - beta * (omega/omega_m - 1)**2), 0, None)

def simulate_plot(sys, t, y, label=None, t_hill=None, vref=20, linetype='r-', 
                    subplots=None, legend=None):
    """"
    Simulation plot creation

    Parameters:
    sys (ct.Interconnected sysyem) : Interconnection of a set of 
            input/output systems
    t (array) : time values of output from ct.input_output_response
    y (array) : response of the system from ct.input_output_response
    t_hill (int): time at which hill occurs
    vref (int): reference velocity 
    linetype (string): line type for pyplots
    subplots (array): plt.subplot(s)
    legend (bool): true or false for legend apperance 

    Returns:
    subplot_axes (array) : plt.subplots(s)

    """
    

# Define the input/output system for the vehicle
    # NonLinearIOSytem
    # vehcile_update: function that returns
    # the state update function for the vehicle
    # None: no function returns output as given state
    # inputs: throttle, gear, slope
    # outputs: updated velocity
    # state: velocity
    # dt: 0 (contiunous time system)
vehicle = ct.NonlinearIOSystem(
    vehicle_update, None, inputs=('u', 'gear', 'theta'), 
                outputs=('v'), states=('v'), dt=0, name='vehicle')